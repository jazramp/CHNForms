@model Sabio.Web.Models.ViewModels.CHNFormViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutPretty.cshtml";
}

<style>
    .ibox-title {
        background-color: #1AB394;
        color: white;
        text-align: center;
        padding: 10px;
    }

    h1 > small {
        color: white;
    }

    .target {
        margin-top: 50px;
    }

    #test {
        margin-left: 20px;
    }

    .history-table {
        margin-left: 5%;
    }

    #clientSidebar {
        position: relative;
    }

    .sidebar-info {
        text-align: left;
    }

    .sidebar-info-block {
        padding-left: 0px;
        padding-bottom: 15px;
        position: absolute;
        bottom: 0;
        right: 0;
    }

    .empty-history {
        margin-top: 5px;
        color: #acacac;
    }

    #btn-step2 {
        float: right;
    }

    .link:hover {
        text-decoration: underline;
    }
</style>


<div class="row wrapper border-bottom white-bg page-heading">
    <h2>California Hospital Network Form</h2>
</div>

<div class="row wrapper target">
    <div class="col-md-6 col-md-offset-1">
        <div class="ibox float-e-margins">
            <div class="ibox-title">
                <h1><strong>California Hospital Network Form</strong></h1>
            </div>
            <div class="ibox-content">
                <form class="form-horizontal" id="chnForm">
                    <div class="form-group">
                        <label class="col-sm-4 control-label">Add to Scar Report?</label>
                        <div class="col-sm-4">
                            <label class="col-sm-4 checkbox-inline i-checks" id="test"> <input type="radio" name="scarReport" class="check-box1" id="checkboxYes-1" value="true">Yes </label>

                            <label class="col-sm-4 checkbox-inline i-checks"> <input type="radio" name="scarReport" class="check-box1" id="checkboxNo-1" value="false"> No </label>
                            <div>

                                <span class="help-inline"></span>
                            </div>

                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-4 control-label">Chief Complaint</label>
                        <div class="col-sm-8">
                            <textarea cols="5" rows="6" class="form-control comField" placeholder="Complaint Description..." name="chiefComplaint" id="complaintField"></textarea>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-4 control-label">Present Illness</label>
                        <div class="col-sm-8">
                            <textarea cols="5" rows="6" class="form-control p-Illness" name="presentIllness" placeholder="Describe Illness..." id="presentIllnessField"></textarea>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-4 control-label">Past History</label>
                        <div class="col-sm-8">
                            <textarea cols="5" rows="6" class="form-control p-History" name="pastHistory" placeholder="Past History Description..." id="pastHistoryField"></textarea>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="col-sm-4 control-label">Prior Medical History Provided?</label>
                        <div class="col-sm-4">
                            <label class="col-sm-4 checkbox-inline i-checks" id="test"> <input type="radio" name="priorMedHistoryProvided" class="check-box" id="checkboxYes-2" value="true">Yes </label>
                            <label class="col-sm-4 checkbox-inline i-checks"> <input type="radio" name="priorMedHistoryProvided" class="check-box" id="checkboxNo-2" value="false"> No </label>

                            <div>

                                <span class="help-inline"></span>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="col-sm-4 control-label">Records Provided</label>
                        <div class="col-sm-8">
                            <textarea cols="5" rows="6" class="form-control recProvided" name="recordsProvided" placeholder="List Records Provided..." id="providedRecords"></textarea>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-offset-4 col-sm-8">
                            <button class="btn btn-primary" type="button" id="chnFormBtn" align="center" value="Submit">Submit</button>
                            <button type="button" class="btn btn-success" id="resetBtn">Reset</button>
                            <button class="btn btn-primary hidden" type="button" id="btn-step2">Next Step</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    @* Insert table here *@
    <div class="col-md-4">
        <div class="ibox float-e-margins history-table">



            <div class="hidden" id="clientHistorySidebar">

                <div class="ibox-title">
                    <div class="row" id="clientSidebar">
                        <div class="col-md-4 text-center">
                            <h2 id="clientName">Client Name</h2>
                            <div class="m-b-sm">
                                <img alt="image" class="img-circle" id="sidebarProfilePic" data-ng-src="/Images/Male_Silhouette.jpg"
                                     style="width: 62px">
                            </div>
                        </div>
                        <div class="col-md-8 sidebar-info-block" id="clientHistorySidebar">
                            <div class="sidebar-info sidebar-clientId"><strong>Patient Id: </strong></div>
                            <div class="sidebar-info sidebar-gender"><strong>Gender: </strong></div>
                            <div class="sidebar-info sidebar-dob"><strong>Date of Birth: </strong></div>
                        </div>
                    </div>

                    <div class="ibox-tools">
                        <a class="collapse-link">
                            <i class="fa fa-chevron-up"></i>
                        </a>
                    </div>
                </div>
                <div class="ibox-content hidden" id="clientHistoryTable">
                    <h5 id="historyTitle">Patient History</h5>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Form #</th>
                                <th>Date</th>
                                <th>Chief Complaint</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody id="historyTableBody"></tbody>
                    </table>
                </div>
                <div>
                    <h4 class="text-center empty-history hidden">No other records for this client</h4>
                </div>
            </div>
        </div>






        <div class="col-md-14">
            <div class="ibox float-e-margins history-table">




                <div data-ng-controller="householdController as main" id="householdHistorySidebar">
                    <div data-ng-repeat="Household in main.households">
                        <div class="ibox-title">
                            <div class="row">
                                <div class="col-md-12 text-center">
                                    <a href="http://cart.dev/household/{{Household.id}}/members" target="_blank" style="color:white" class="link"><h2>{{Household.name}}</h2></a>
                                </div>
                            </div>

                            <div class="ibox-tools">
                                <a class="collapse-link collapsed" data-toggle="collapse" data-target="#{{Household.id}}" data-ng-click="show=!show">
                                    <i class="fa fa-chevron-up" data-ng-show="show"></i>
                                    <i class="fa fa-chevron-down" data-ng-show="!show"></i>
                                </a>
                            </div>

                        </div>

                        <div class="ibox-content collapse" aria-expanded="false" id="{{Household.id}}">
                            <div data-ng-repeat="client in Household.clients | orderBy: '+name'" data-ng-if="client.id != main.clientId">
                                <div class="row" id="clientSidebar">
                                    <h3 class="col-md-10">{{client.name}}</h3>
                                    <div class="col-md-4 text-center">
                                        <div class="m-b-sm">
                                            <img data-ng-if="client.photoUrl" alt="image" class="img-circle" id="sidebarProfilePic" data-ng-src="{{client.photoUrl}}"
                                                 style="width: 62px">
                                            <img data-ng-hide="client.photoUrl" alt="image" class="img-circle" id="sidebarProfilePic" data-ng-src="/Images/Male_Silhouette.jpg"
                                                 style="width: 62px">
                                        </div>
                                    </div>
                                    <div class="col-md-8 sidebar-info-block" id="clientHistorySidebar">
                                        <div class="sidebar-info sidebar-clientId">Patient Id: {{client.patientId}}</div>
                                        <div class="sidebar-info sidebar-dob">Date of Birth: {{client.dob | date : format : timezone}}</div>
                                    </div>
                                </div>
                                <div class="ibox-tools">
                                    <a class="collapse-link collapsed" data-toggle="collapse" data-target="#priorHistory-{{Household.id}}-{{client.id}}" data-ng-click="main.onGetChnHistoryClick(client.id); show=!show">
                                        <i class="fa fa-chevron-up" data-ng-show="!show"></i>
                                        <i class="fa fa-chevron-down" data-ng-show="show"></i>
                                    </a>
                                </div>

                                <div class="ibox-content collapse" aria-expanded="false" id="priorHistory-{{Household.id}}-{{client.id}}">
                                    <div data-ng-show="main.chn[client.id].length > 0">
                                        <h5 id="historyTitle">Patient History</h5>
                                        <table class="table table-striped">
                                            <thead>
                                                <tr>
                                                    <th>Form #</th>
                                                    <th>Date</th>
                                                    <th>Chief Complaint</th>
                                                    <th></th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr data-ng-repeat="chn in main.chn[client.id]" data-ng-show="chn.id">
                                                    <td class="history-id">{{chn.id}}</td>
                                                    <td><span class="line history-date">{{chn.dateAdded | date:"MM/dd/yyyy"}}</span></td>
                                                    <td class="history-complaint">{{chn.chiefComplaint}}</td>
                                                    <td class=""><a href="/CHNForms/{{chn.id}}/edit/" class="history-edit-link">edit</a></td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>

                                        <div data-ng-show="main.chn[client.id].length == []">
                                            <h4 class="text-center empty-history">No other records for this client</h4>
                                        </div>

                                    </div>
                                    




                                <div class="hr-line-dashed"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

@section scripts{

    <script type="text/javascript" src="~/Scripts/jquery.validate.js"></script>
    <script type="text/javascript" src="~/Scripts/sabio.services.chnForm.js"></script>
    <script text="text/javascript" src="~/Scripts/sabio.services.clients.js"></script>
    <script src="~/Scripts/sabio/core/sabio.ui.js"></script>
    <script src="~/Scripts/moment.js"></script>
    <script src="~/Scripts/sabio.services.households.js"></script>
    @*<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>*@

    <script type="text/template" id="historyTableTemplate">
        <tr>
            <td class="history-id"></td>
            <td><span class="line history-date">5,3,2,-1,-3,-2,2,3,5,2</span></td>
            <td class="history-complaint">Samantha</td>
            <td class=""><a class="history-edit-link">edit</a></td>
        </tr>
    </script>

    <script>

            @if (Model.CHNFormId != null)
            {
                 @:sabio.page.getId = @Model.CHNFormId;
        

            }

            @if (Model.ClientId != null)
            {
                @:sabio.page.clientId = @Model.ClientId;
             
            }



    </script>

    <script type="text/javascript">

        sabio.page.startUp = function () {

            if (sabio.page.getId != null)
            {
                    
                sabio.services.chnForm.getById(sabio.page.getId, sabio.page.handlers.getByIdSuccess, sabio.page.handlers.onUpdateError);

            }

            if (sabio.page.clientId != null)
            {
              
                sabio.services.clients.getById(sabio.page.clientId, sabio.page.handlers.getClientByIdSuccess, sabio.page.handlers.onGetClientByIdError);
                sabio.services.chnForm.getByClientId(sabio.page.clientId, sabio.page.handlers.getFormByClientIdSuccess, sabio.page.handlers.onGetByClientIdError);
                console.log(sabio.page.clientId);
                angular.element($('#householdHistorySidebar')).scope().main.render(sabio.page.clientId);
            }

            $("#chnFormBtn").on("click", sabio.page.handlers.submitCHNForm);
            $("#resetBtn").on("click", sabio.page.handlers.onResetBtnClick);
            $("#btn-step2").on("click", sabio.page.handlers.confirmMoveToStep2);

            $("form").on("change", sabio.page.handlers.markFormUnsaved);

            sabio.page.initializeValidation();
            sabio.page.click = 1;
            sabio.page.formId = null;
            sabio.page.formUnsaved = true;
        }



        //      Callback Functions For Insert/Update

        sabio.page.handlers.markFormUnsaved = function () {
            sabio.page.formUnsaved = true;
        }

        sabio.page.handlers.confirmMoveToStep2 = function () {
            if (sabio.page.formUnsaved) {
                sabio.ui.confirm("Your changes have not been saved. Are you sure you want to move on?", sabio.page.handlers.moveToStep2);
            } else {
                sabio.page.handlers.moveToStep2();
            }
        }

        sabio.page.handlers.moveToStep2 = function () {
            window.location.href = "/chnForms/" + sabio.page.formId + "/step2";
        }

        sabio.page.handlers.onInsertSuccess = function (responseData) {
            sabio.page.formId = responseData.item;
            sabio.page.formUnsaved = false;

            sabio.ui.alert("Form Submitted!");
            sabio.page.click = 2;
            $("#chnFormBtn").text("Save Changes");
            $("#btn-step2").removeClass("hidden");

            console.log(responseData);
        }
        sabio.page.handlers.onInsertError = function () {

            console.log("Error!")
        }

        sabio.page.handlers.getByIdSuccess = function (responseData) {
            $("#chnFormBtn").text("Save Changes");
            sabio.page.click = 2;

            sabio.page.formId = sabio.page.getId;
            var client = responseData.item;
            sabio.page.clientId = client.clientId;
            angular.element($('#householdHistorySidebar')).scope().main.render(sabio.page.clientId);
            var formUpdateData = responseData.item;
            sabio.page.populateForm(formUpdateData);

            var clientId = responseData.item.clientId;
            sabio.services.chnForm.getByClientId(clientId, sabio.page.handlers.getFormByClientIdSuccess, sabio.page.handlers.onGetByClientIdError);

            sabio.services.clients.getById(clientId, sabio.page.handlers.getClientByIdSuccess, sabio.page.handlers.onGetClientByIdError);

        }

        // sabio.page.handlers.gettheclientid = function (responseData) {
        //    //$("#chnFormBtn").text("Save Changes");
        //    //sabio.page.click = 2;

        //    var stuff = responseData.items;


        //}

        //sabio.page.handlers.getClientIdSuccess = function (responseData) {


        //    var clientId = sabio.page.getClientId;
        //    sabio.page.handlers.submitCHNForm(clientId);

        //    console.log(responseData);
        //}
        sabio.page.handlers.onGetByIdError = function () {
            console.log("error");
        }

        sabio.page.handlers.onUpdateSuccess = function () {
            sabio.page.formUnsaved = false;
            sabio.ui.alert("Changes Saved!");
        }

        sabio.page.handlers.onUpdateError = function () {
            console.log("Update Failed.")
            alert("Update Failed.")
        }
        //-----------        --------------              --------------------

        sabio.page.handlers.onResetBtnClick = function () {
            $('#chnForm')[0].reset();
            $("#chnFormBtn").text("Submit");
            sabio.page.click = 1;
        }


        sabio.page.populateForm = function (formUpdateData) {
            var data = formUpdateData;


            if (data.scarReport === true) {
                $('#checkboxYes-1').prop('checked', true);
            }
            else {
                $('#checkboxNo-1').prop('checked', true);
            }

            if (data.priorMedHistoryProvided === true) {
                $('#checkboxYes-2').prop('checked', true);
            }
            else {
                $('#checkboxNo-2').prop('checked', true);
            }
            //$(".clientId").val(sabio.page.clientId);
            $(".comField").val(data.chiefComplaint);
            $(".p-Illness").val(data.presentIllness);
            $(".p-History").val(data.pastHistory);
            $(".recProvided").val(data.recordsProvided);
        }

        sabio.page.initializeValidation = function () {
            //  set defaults for the entire plugin
            jQuery.validator.setDefaults({
                debug: true
            });

            //  set rules and error messages
            $('#chnForm').validate({

                errorPlacement: function (error, element) {
                    if (element.attr("name") == "scarReport" || element.attr("name") == "priorMedHistoryProvided") {
                        var location = element.closest("div").find("span");
                        error.appendTo(location);
                        console.log(element);
                        console.log(error);
                    }

                    else {
                        error.insertAfter(element);

                    }

                },
                rules: {

                    "clientId": {
                        required: true
                    },

                    "scarReport": {
                        required: true

                    },
                    "chiefComplaint": {
                        required: true,
                        maxlength: 1000
                    },
                    "presentIllness": {
                        required: true,
                        maxlength: 1000
                    },
                    "pastHistory": {
                        required: true,
                        maxlength: 1000
                    },
                    "priorMedHistoryProvided": {
                        required: true
                    },

                    "recordsProvided": {
                        required: true,
                        maxlength: 1000
                    }

                },
                //  here you can provide custom error messages if you want to - this part is optional
                messages: {
                    "clientId": {
                        required: "*Enter ClientId.",

                    },

                    "scarReport": {
                        required: "*Select Yes or No."

                    },
                    "chiefComplaint": {
                        required: "*Required Field only 1000 character limit. Or N/A if not applicable."

                    },
                    "presentIllness": {
                        required: "*Required Field only 1000 character limit. Or N/A if not applicable."

                    },
                    "pastHistory": {
                        required: "*Required Field only 1000 character limit. Or N/A if not applicable."

                    },
                    "priorMedHistoryProvided": {
                        required: "*Select Yes or No."

                    },
                    "recordsProvided": {
                        required: "*Required Field only 1000 character limit. Or N/A if not applicable."

                    },
                }

            });
        };


        sabio.page.handlers.submitCHNForm = function () {
            //  this line checks the data from the form against the rules defined on startUp.
            if ($('#chnForm').valid()) {
                var formData = $('#chnForm').serialize() + "&clientId=" + sabio.page.clientId;
                if (sabio.page.click === 1) {

                    sabio.services.chnForm.insert(formData, sabio.page.handlers.onInsertSuccess, sabio.page.handlers.onInsertError);
                    console.log(sabio.page.clientId);
                }

                else {

                    var clientId = sabio.page.clientId;
                    var updateFormData = $('#chnForm').serialize() + "&id=" + sabio.page.formId + "&clientId=" + sabio.page.clientId; //changed from id

                    sabio.services.chnForm.update(sabio.page.formId, updateFormData, sabio.page.handlers.onUpdateSuccess, sabio.page.handlers.onUpdateError);

                }
            }

        };
        //Sidebar functions

        sabio.page.loopThroughClientFormHistory = function (formArray) {

            if (!(formArray.length == 1 && formArray[0].id == sabio.page.getId)){
                $('#clientHistoryTable').removeClass('hidden');

                for (var i = 0; i < formArray.length; i++) {

                    var currentForm = formArray[i];

                    if (currentForm.id != sabio.page.getId) {
                        var id = currentForm.id;
                        var dateAdded = moment(currentForm.dateAdded).format('MM/DD/YYYY');
                        var chiefComplaint = currentForm.chiefComplaint;
                        var editUrl = "/CHNForms/" + id + "/edit/"

                        var $clientHistoryRow = $($('#historyTableTemplate').html());
                        // replace name in comment html
                        $clientHistoryRow.find('.history-id').text(id);
                        $clientHistoryRow.find('.history-date').text(dateAdded);
                        $clientHistoryRow.find('.history-complaint').text(chiefComplaint);
                        $clientHistoryRow.find('.history-edit-link').attr("href", editUrl);

                        $('#historyTableBody').append($clientHistoryRow);
                    }
                }
            }
            else{
                $('.empty-history').removeClass('hidden');
            }
        }

        sabio.page.handlers.getFormByClientIdSuccess = function (data) {

            if (data.items != null){
                sabio.page.loopThroughClientFormHistory(data.items);
            }

            else {
                $('.empty-history').removeClass('hidden');
            }
        }

        sabio.page.handlers.onGetByClientIdError = function () {
            console.log("Error loading client data");
        }

        sabio.page.handlers.getClientByIdSuccess = function (data) {

            sabio.page.populateClientSidebar(data);
        }

        sabio.page.handlers.onGetClientByIdError = function () {
            console.log("Error");
        }

        sabio.page.populateClientSidebar = function (clientObject) {

            $('#clientHistorySidebar').removeClass('hidden');

            var patientId = clientObject.patientId;
            var patientDob = moment(clientObject.dateOfBirth).format('MM/DD/YYYY');
            var genderVal = clientObject.gender;
            var patientName = clientObject.name;
            var genderReturn = {};

            switch (genderVal) {
                case 1:
                    genderReturn.genderString = "Male";
                    genderReturn.profileReturn = "http://cart.dev/Images/Male_Silhouette.jpg";
                    break;
                case 2:
                    genderReturn.genderString = "Female";
                    genderReturn.profileReturn = "http://cart.dev/Images/Female_Silhouette.jpg";
                    break;
                default:
                    genderReturn.genderString = "Other";
                    genderReturn.profileReturn = "http://cart.dev/Images/Male_Silhouette.jpg";
            };

            $('#sidebarProfilePic').attr('src',genderReturn.profileReturn);
            $("#clientName").text(patientName);
            $('#clientHistorySidebar').find('.sidebar-clientId').append(patientId);
            $('#clientHistorySidebar').find('.sidebar-gender').append(genderReturn.genderString);
            $('#clientHistorySidebar').find('.sidebar-dob').append(patientDob);

        }



    </script>

    <script type="text/javascript">

        (function(){
            "use strict"

            angular.module(APPNAME)
                .factory('$householdService', HouseholdServiceFactory);

            HouseholdServiceFactory.$inject = ['$baseService'];

            function HouseholdServiceFactory($baseService){

                var aSabioServiceObject = sabio.services.households;

                var newService = $baseService.merge(true, {}, aSabioServiceObject, $baseService);

                return newService;
            }
        })();

        (function(){
            "use strict"

            angular.module(APPNAME)
                .factory('$chnFormService', ChnFormServiceFactory);

            ChnFormServiceFactory.$inject = ['$baseService'];

            function ChnFormServiceFactory($baseService){
                var aSabioServiceObject = sabio.services.chnForm;

                var newService = $baseService.merge(true, {}, aSabioServiceObject, $baseService);

                return newService;
            };
        })();

        (function(){
            "use strict"

            var myapp = angular.module(APPNAME);

            myapp.controller('householdController', HouseholdController);

            HouseholdController.$inject = [ '$scope'
                                            ,'$baseController'
                                            ,'$householdService'
                                            ,'$chnFormService'];

            function HouseholdController($scope
                                         ,$baseController
                                         ,$householdService
                                         ,$chnFormService){

                var vm = this;

                $baseController.merge(vm, $baseController);

                vm.$scope = $scope;
                vm.$householdService = $householdService;
                vm.$chnFormService = $chnFormService;

                vm.clientId = null;
                vm.households = {};
                vm.clients = [];
                vm.chn = [];

                vm.onGetHouseholdListSuccess = _onGetHouseholdListSuccess;
                vm.onGetHouseholdListError = _onGetHouseholdListError;
                vm.onGetChnHistoryClick = _onGetChnHistoryClick;
                vm.onGetChnHistorySuccess = _onGetChnHistorySuccess;
                vm.onGetChnHistoryError = _onGetChnHistoryError;

                vm.notify = vm.$householdService.getNotifier($scope);
                
                vm.render = _render;

                function _render(clientId){
                    vm.clientId = clientId;
                    console.log("client Id " + vm.clientId);
                    $householdService.getByClientId(vm.clientId, _onGetHouseholdListSuccess, _onGetHouseholdListError);
                };

                function _onGetHouseholdListSuccess(responseData){
                    console.log("Successfully retrived list of Households");
                    vm.notify(function(){
                        vm.households = responseData.items;
                    });
                };

                function _onGetHouseholdListError(){
                    console.log("Failed to retrive list of Households")
                };

                function _onGetChnHistoryClick(clientId){
                    if(!vm.chn[clientId]){
                        vm.chn[clientId] = [];
                        vm.$chnFormService.getByClientId(clientId, _onGetChnHistorySuccess, _onGetChnHistoryError);
                    } 
                };

                function _onGetChnHistorySuccess(chn){
                    console.log("Successfully retrieved lists of CHN Form History");
                    vm.notify(function(){
                        if(chn.items){
                            vm.chn[chn.items[0].clientId] = chn.items;
                        } 
                    });
                };

                function _onGetChnHistoryError(){
                    console.log("Failed to retrieve lists of CHN Form History");
                };
            }
        })();

    </script>

   
        
      


}
